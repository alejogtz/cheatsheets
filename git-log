# List git authors
git log --format='%aN' | sort -u

# Find commit hash which contains file throught all branches by regexp
git log --all -- '**/my_file.png'

# Find branches which contains desired commit
git branch --contains {{commit}}

# Show changes in file from line to line
git log -L {{start}},{{end}}:{{path_file}}
git log -L 208,220:app/mailers/gps_mailer.rb

# Show changes made by author in given path
git log --author="{{author}}" -p -- {{path}}

# show branches of alejo/onboarding and master
git log --branches={"alejo/onboarding","[m]aster"} --oneline --graph --first-parent
git log --branches="alejo/onboarding" --oneline --graph --first-parent

# Show all authors of repository
git log --format='%an' | sort -u

# Commits of author without merge commits
git log --author='Alejo Gutierrez' --no-merges
git log --author='Alejo Gutierrez'  --oneline --pretty=format:"%h %s (%ad)" --date=format:'%b %d, %Y' --no-merges

# See commit history of specified branch
git log --oneline {{branch}}

# Pretty git log 
# Format: <sha-> <time ago> <author> <branch> <commit message>:
git log --pretty='%C(yellow)%h %C(cyan)%cd %Cblue%aN%C(auto)%d %Creset%s' --graph --date=relative --date-order

# Log current branch but only their commits
git log  --oneline --first-parent

# Log current branc, also ignoring merge commits
git log --oneline --no-merges --first-parent

# See diff against its previuos commit
git log -p [-m] [--follow] [-1] <path>

# show commits under branch <name>
git log --branches="insurance-renewal/*" --oneline --graph --color --all

# show multiple branches log. For more examples see: git-branch
git log --branches={"[m]aster","[t]est-model-invoice-information"} --oneline --graph --color

# Related
#
#

# Show files changes in specified commit
git show <sha-commit> -- <file>


# Magia muy negra para listar commits perdidos en stash
 git log --graph --oneline --decorate  --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' )
